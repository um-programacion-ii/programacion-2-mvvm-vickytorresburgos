package com.example.demoobserver.service;

import com.example.demoobserver.display.HumidityDisplay;
import com.example.demoobserver.display.TemperatureDisplay;
import com.example.demoobserver.subject.implementation.WeatherStation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

@Slf4j
@Service
public class ObserverDemoService {
    public void runObserverDemo() {
        /**
         * Ejecuta la demostraci√≥n completa del patr√≥n Observer.
         * Simula un escenario real donde una estaci√≥n meteorol√≥gica
         * actualiza diferentes displays cuando cambian las condiciones clim√°ticas.
         */
        log.info("üöÄ Iniciando demostraci√≥n del patr√≥n Observer");
        log.info("==============================================");

        // 1. Crear la estaci√≥n meteorol√≥gica (el Subject)
        WeatherStation weatherStation = new WeatherStation();
        log.info("üì° Estaci√≥n meteorol√≥gica creada");

        // 2. Crear los displays (los Observers)
        TemperatureDisplay tempDisplay = new TemperatureDisplay();
        HumidityDisplay humidityDisplay = new HumidityDisplay();
        log.info("üì∫ Displays creados");

        // 3. Registrar los observadores con el sujeto
        log.info("üîó Registrando observadores...");
        weatherStation.registerObserver(tempDisplay);
        weatherStation.registerObserver(humidityDisplay);
        log.info("‚úÖ Observadores registrados exitosamente");

        // 4. Simular cambios clim√°ticos - Primera actualizaci√≥n
        log.info("\nüå§Ô∏è  Primera actualizaci√≥n clim√°tica:");
        weatherStation.setMeasurements(25.5f, 65.0f, 1013.2f);

        // 5. Simular m√°s cambios clim√°ticos
        log.info("\nüåßÔ∏è  Segunda actualizaci√≥n clim√°tica:");
        weatherStation.setMeasurements(22.1f, 78.5f, 1009.8f);

        // 6. Simular cambio solo de temperatura y humedad
        log.info("\n‚òÄÔ∏è  Tercera actualizaci√≥n clim√°tica:");
        weatherStation.setMeasurements(28.7f, 45.2f);

        // 7. Demostrar remoci√≥n de un observador
        log.info("\n‚ùå Removiendo display de temperatura...");
        weatherStation.removeObserver(tempDisplay);

        // 8. √öltima actualizaci√≥n - solo el display de humedad deber√≠a actualizarse
        log.info("\n‚ùÑÔ∏è  Cuarta actualizaci√≥n clim√°tica (solo humedad):");
        weatherStation.setMeasurements(18.3f, 82.1f, 1015.6f);

        // 9. Mostrar estad√≠sticas finales
        log.info("\nüìä Estad√≠sticas finales:");
        log.info("   Observadores registrados: {}", weatherStation.getObservers().size());
        log.info("   √öltima temperatura en display: {}¬∞C", tempDisplay.getCurrentTemperature());
        log.info("   √öltima humedad en display: {}%", humidityDisplay.getCurrentHumidity());

        log.info("\n‚úÖ Demostraci√≥n del patr√≥n Observer completada");
        log.info("==============================================");
    }

    /**
     * Demostraci√≥n simplificada que muestra solo los conceptos b√°sicos.
     * √ötil para entender r√°pidamente c√≥mo funciona el patr√≥n.
     */
    public void runBasicDemo() {
        log.info("üéØ Demo b√°sica del patr√≥n Observer");
        log.info("=================================");

        // Crear componentes b√°sicos
        WeatherStation station = new WeatherStation();
        TemperatureDisplay display = new TemperatureDisplay();

        // Registrar y probar
        station.registerObserver(display);
        station.setMeasurements(20.0f, 50.0f);

        log.info("‚úÖ Demo b√°sica completada");
    }
}